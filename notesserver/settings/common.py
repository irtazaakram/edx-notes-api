"""
Django settings for notesserver project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "CHANGEME"  # Override in production

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]

DISABLE_TOKEN_CHECK = False

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "release_util",
    "drf_spectacular",
    "notesapi.v1",
]

MIDDLEWARE = [
    "edx_django_utils.monitoring.CookieMonitoringMiddleware",
    "edx_django_utils.monitoring.DeploymentMonitoringMiddleware",
    "edx_django_utils.cache.middleware.RequestCacheMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "edx_rest_framework_extensions.middleware.RequestMetricsMiddleware",
    "edx_rest_framework_extensions.auth.jwt.middleware.EnsureJWTAuthSettingsMiddleware",
]

ROOT_URLCONF = "notesserver.urls"

# Templates configuration
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            # The EdxNotes templates directory is not actually under any app
            # directory, so specify its absolute path.
            BASE_DIR
            / "templates"
        ],
        "APP_DIRS": True,  # This ensures app templates are loadable, e.g. DRF views.
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "notesserver.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "HOST": "localhost",
        "NAME": "edx_notes_api",
        "USER": "notes001",
        "PASSWORD": "secret",
        "PORT": 3306,
        "OPTIONS": {"connect_timeout": 10},
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Authentication settings
AUTH_USER_MODEL = "auth.User"

# ID and Secret used for authenticating JWT Auth Tokens
# should match those configured for `edx-notes` Client in EdX's /admin/oauth2/client/
CLIENT_ID = "CHANGEME"
CLIENT_SECRET = "CHANGEME"

# Elasticsearch configuration
ES_DISABLED = False

ES_APPS = (
    "elasticsearch_dsl",
    "django_elasticsearch_dsl",
    "django_elasticsearch_dsl_drf",
)
if not ES_DISABLED:
    INSTALLED_APPS.extend(ES_APPS)

ELASTICSEARCH_URL = "localhost:9200"
ELASTICSEARCH_INDEX = "edx_notes"
ELASTICSEARCH_DSL = {"default": {"hosts": ELASTICSEARCH_URL}}
ELASTICSEARCH_DSL_INDEX_SETTINGS = {"number_of_shards": 1, "number_of_replicas": 0}
ELASTICSEARCH_INDEX_NAMES = {"notesapi.v1.search_indexes.documents.note": "edx_notes_api"}
ELASTICSEARCH_DSL_SIGNAL_PROCESSOR = "django_elasticsearch_dsl.signals.RealTimeSignalProcessor"

# Results pagination settings
RESULTS_DEFAULT_SIZE = 25  # Number of rows to return by default in result.
RESULTS_MAX_SIZE = 250  # Max number of rows to return in result.
DEFAULT_NOTES_PAGE_SIZE = 25
MAX_NOTES_PER_COURSE = 500

# Logging settings
LOG_SETTINGS_LOG_DIR = "/var/tmp"
LOG_SETTINGS_LOGGING_ENV = "no_env"
LOG_SETTINGS_DEV_ENV = False
LOG_SETTINGS_DEBUG = False
LOG_SETTINGS_LOCAL_LOGLEVEL = "INFO"
LOG_SETTINGS_EDX_FILENAME = "edx.log"
LOG_SETTINGS_SERVICE_VARIANT = "edx-notes-api"

# REST framework settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ["rest_framework.authentication.SessionAuthentication"],
    "DEFAULT_PERMISSION_CLASSES": ["notesapi.v1.permissions.HasAccessToken"],
    "DEFAULT_PAGINATION_CLASS": "notesapi.v1.paginators.NotesPaginator",
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# Spectacular settings for API documentation
SPECTACULAR_SETTINGS = {
    "TITLE": "Edx Notes API",
    "DESCRIPTION": "Edx Notes API docs",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SCHEMA_PATH_PREFIX": "/api/",
}

# CORS is configured to allow all origins because requests to the
# Notes API do not rely on ambient authority; instead, they are
# authorized explicitly via an X-Annotator-Auth-Token header. (The
# default permission class is HasAccessToken, which checks it.)
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = (
    "x-requested-with",
    "content-type",
    "accept",
    "origin",
    "authorization",
    "x-csrftoken",
    "x-annotator-auth-token",
)

# JWT authentication settings
JWT_AUTH = {
    "JWT_AUTH_HEADER_PREFIX": "JWT",
    "JWT_ISSUER": [
        {
            "AUDIENCE": "SET-ME-PLEASE",
            "ISSUER": "http://127.0.0.1:8000/oauth2",
            "SECRET_KEY": "SET-ME-PLEASE",
        },
    ],
    "JWT_PUBLIC_SIGNING_JWK_SET": None,
    "JWT_AUTH_COOKIE_HEADER_PAYLOAD": "edx-jwt-cookie-header-payload",
    "JWT_AUTH_COOKIE_SIGNATURE": "edx-jwt-cookie-signature",
    "JWT_ALGORITHM": "HS256",
}

CSRF_TRUSTED_ORIGINS = []
USERNAME_REPLACEMENT_WORKER = "OVERRIDE THIS WITH A VALID USERNAME"
